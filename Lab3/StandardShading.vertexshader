#version 330 core

// Input vertex data, this uses interleaved data in one struct called a MeshVertex within the CPP model loading code
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec2 vertexUV1;
layout(location = 4) in vec4 vertexColour;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Normal;
out vec3 FragmentPosition_WorldSpace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;	// application input: Model-View-Projection matrix
uniform mat4 V;		// application input: View matrix
uniform mat4 M;		// application input: Model matrix

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	// Position of the vertex, in worldspace : M * position
	FragmentPosition_WorldSpace = (M * vec4(vertexPosition_modelspace,1)).xyz;

	// normal 
	Normal = mat3(transpose(inverse(M))) * vertexNormal_modelspace; 
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

