#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normalPosition_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Normal;
out vec3 FragPosWorldSpace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform vec3 LightPositionWorldSpace;
uniform mat4 M;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	// output position of the vertex in world space so we can use it in fragment shader
	FragPosWorldSpace = vec3(M * vec4(vertexPosition_modelspace, 1));
	// pass through normal into interpolators in the rasterizer! the inverse+transpose deal with non uniform scaling of normals
	Normal = mat3(transpose(inverse(M))) * normalPosition_modelspace; 
	// UV of the vertex. Pass through to interpolators
	UV = vertexUV;
}

