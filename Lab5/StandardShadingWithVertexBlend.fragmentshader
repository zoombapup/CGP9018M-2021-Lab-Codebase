#version 330 core
out vec3 FragColor;

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 col;

// constants for whole mesh
uniform sampler2D texture_diffuse1;
uniform sampler2D texture_emissive1;
uniform sampler2D texture_specular1; // this is being used as a mask texture so we can blend with some interest!

uniform vec4 light;	// light position (xyz) and light power (w)
uniform vec3 lightColour;
uniform float ambientlevel;
uniform float transitionpower;
uniform float blendamount;
uniform float masktexturescale;
uniform bool showVertexColour;

void main()
{    
	// Lighting properties
	float LightPower = light.w;

	// col = vertex colour.. 
	vec2 scaleduv = UV * masktexturescale;
	vec3 masktex = texture(texture_specular1,scaleduv).rgb;
	float clampcolour = clamp(col.r + (masktex.g * col.r),0.0,1.0);
	float powervalue = pow(clampcolour, transitionpower);
	float blendvalue = clamp(powervalue,0.0,1.0);

	// Material properties
	vec3 MaterialDiffuseColor = mix(texture( texture_diffuse1, UV ).rgb,texture(texture_emissive1,UV).rgb,blendvalue);
	if(showVertexColour == true)
	{
		MaterialDiffuseColor = vec3(col.r,col.r,col.r);
	}
		
	vec3 MaterialAmbientColor = vec3(ambientlevel,ambientlevel,ambientlevel) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.5,0.5,0.5);

	// Distance to the light
	float distance = length( light.xyz - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	FragColor = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * lightColour * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * lightColour * LightPower * pow(cosAlpha,15) / (distance*distance);

}