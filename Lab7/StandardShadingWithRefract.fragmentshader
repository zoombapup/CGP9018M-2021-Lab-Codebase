#version 330 core
out vec3 FragColor;

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;
in vec3 Normal_worldspace;

// constants for whole mesh
uniform sampler2D texture_diffuse1;
uniform sampler2D texture_ao1;
uniform sampler2D texture_normal1;
uniform sampler2D texture_specular1;
uniform samplerCube texcube;

uniform vec4 light;	// light position (xyz) and intensity/power (w)
uniform vec3 lightColour;
uniform float ambientlevel;
uniform vec3 rimlightColour;
uniform vec4 rimparams;
uniform float reflectionamount;
uniform vec3 cameraPosition;
uniform float indexofrefraction;

void main()
{    
	float LightPower = light.w;
	

	// Material properties
	vec3 MaterialDiffuseColor = texture( texture_diffuse1, UV ).rgb * texture( texture_ao1, UV).rgb;
	vec3 MaterialAmbientColor = vec3(ambientlevel,ambientlevel,ambientlevel) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = texture(texture_specular1, UV).rgb;

	// texture normal in tangent space
	vec3 TextureNormal_tangentspace = normalize(texture( texture_normal1, UV ).rgb*2.0 - 1.0);

	// Distance to the light
	float distance = length( light.xyz - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );

	// TODO: compute specular here - also compute reflection vector and look it up in texture cube

	// don't forget, refraction uses indexofrefraction when reflecting vectors!!
	
	vec3 refractcolour = vec3(0.0,1.0,0.0);

	vec3 tFragColor = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * lightColour * LightPower * cosTheta / (distance*distance);
		// TODO: Add back specular here.. etc.. etc.. :)


	FragColor = mix(tFragColor,refractcolour,reflectionamount);

}