#version 330 core
out vec3 FragColor;

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

// constants for whole mesh
uniform sampler2D texture_diffuse1;
uniform sampler2D texture_ao1;
uniform sampler2D texture_normal1;
uniform sampler2D texture_specular1;

uniform vec4 light;	// light position (xyz) and intensity/power (w)
uniform vec3 lightColour;
uniform float ambientlevel;


void main()
{    
	float LightPower = light.w;
	

	// Material properties
	vec3 MaterialDiffuseColor = texture( texture_diffuse1, UV ).rgb * texture( texture_ao1, UV).rgb;
	vec3 MaterialAmbientColor = vec3(ambientlevel,ambientlevel,ambientlevel) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = texture(texture_specular1, UV).rgb;

	// texture normal in tangent space
	vec3 TextureNormal_tangentspace = normalize(texture( texture_normal1, UV ).rgb*2.0 - 1.0);

	// Distance to the light
	float distance = length( light.xyz - Position_worldspace );

	// Normal of the computed fragment, in tangent space
	vec3 n = TextureNormal_tangentspace;
	
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_tangentspace );
	
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	//cosTheta = 0.0;
	
	// Eye vector (towards the camera) in tangent space
	vec3 E = normalize(EyeDirection_tangentspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	FragColor = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * lightColour * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * lightColour * LightPower * pow(cosAlpha,15) / (distance*distance);

}